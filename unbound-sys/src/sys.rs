// automatically generated by rust-bindgen

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub enum ub_ctx { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ub_result {
    pub qname: *mut ::std::os::raw::c_char,
    pub qtype: ::std::os::raw::c_int,
    pub qclass: ::std::os::raw::c_int,
    pub data: *mut *mut ::std::os::raw::c_char,
    pub len: *mut ::std::os::raw::c_int,
    pub canonname: *mut ::std::os::raw::c_char,
    pub rcode: ::std::os::raw::c_int,
    pub answer_packet: *mut ::std::os::raw::c_void,
    pub answer_len: ::std::os::raw::c_int,
    pub havedata: ::std::os::raw::c_int,
    pub nxdomain: ::std::os::raw::c_int,
    pub secure: ::std::os::raw::c_int,
    pub bogus: ::std::os::raw::c_int,
    pub why_bogus: *mut ::std::os::raw::c_char,
    pub ttl: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for ub_result {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ub_callback_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void,
                                                 arg2: ::std::os::raw::c_int,
                                                 arg3: *mut ub_result)>;
extern "C" {
    pub fn ub_ctx_create() -> *mut ub_ctx;
    pub fn ub_ctx_delete(ctx: *mut ub_ctx);
    pub fn ub_ctx_set_option(ctx: *mut ub_ctx,
                             opt: *const ::std::os::raw::c_char,
                             val: *const ::std::os::raw::c_char)
                             -> ::std::os::raw::c_int;
    pub fn ub_ctx_get_option(ctx: *mut ub_ctx,
                             opt: *const ::std::os::raw::c_char,
                             str: *mut *mut ::std::os::raw::c_char)
                             -> ::std::os::raw::c_int;
    pub fn ub_ctx_config(ctx: *mut ub_ctx,
                         fname: *const ::std::os::raw::c_char)
                         -> ::std::os::raw::c_int;
    pub fn ub_ctx_set_fwd(ctx: *mut ub_ctx,
                          addr: *const ::std::os::raw::c_char)
                          -> ::std::os::raw::c_int;
    pub fn ub_ctx_set_stub(ctx: *mut ub_ctx,
                           zone: *const ::std::os::raw::c_char,
                           addr: *const ::std::os::raw::c_char,
                           isprime: ::std::os::raw::c_int)
                           -> ::std::os::raw::c_int;
    pub fn ub_ctx_resolvconf(ctx: *mut ub_ctx,
                             fname: *const ::std::os::raw::c_char)
                             -> ::std::os::raw::c_int;
    pub fn ub_ctx_hosts(ctx: *mut ub_ctx,
                        fname: *const ::std::os::raw::c_char)
                        -> ::std::os::raw::c_int;
    pub fn ub_ctx_add_ta(ctx: *mut ub_ctx,
                         ta: *const ::std::os::raw::c_char)
                         -> ::std::os::raw::c_int;
    pub fn ub_ctx_add_ta_file(ctx: *mut ub_ctx,
                              fname: *const ::std::os::raw::c_char)
                              -> ::std::os::raw::c_int;
    pub fn ub_ctx_add_ta_autr(ctx: *mut ub_ctx,
                              fname: *const ::std::os::raw::c_char)
                              -> ::std::os::raw::c_int;
    pub fn ub_ctx_trustedkeys(ctx: *mut ub_ctx,
                              fname: *const ::std::os::raw::c_char)
                              -> ::std::os::raw::c_int;
    pub fn ub_ctx_debugout(ctx: *mut ub_ctx,
                           out: *mut ::std::os::raw::c_void)
                           -> ::std::os::raw::c_int;
    pub fn ub_ctx_debuglevel(ctx: *mut ub_ctx, d: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ub_ctx_async(ctx: *mut ub_ctx,
                        dothread: ::std::os::raw::c_int)
                        -> ::std::os::raw::c_int;
    pub fn ub_poll(ctx: *mut ub_ctx) -> ::std::os::raw::c_int;
    pub fn ub_wait(ctx: *mut ub_ctx) -> ::std::os::raw::c_int;
    pub fn ub_fd(ctx: *mut ub_ctx) -> ::std::os::raw::c_int;
    pub fn ub_process(ctx: *mut ub_ctx) -> ::std::os::raw::c_int;
    pub fn ub_resolve(ctx: *mut ub_ctx,
                      name: *const ::std::os::raw::c_char,
                      rrtype: ::std::os::raw::c_int,
                      rrclass: ::std::os::raw::c_int,
                      result: *mut *mut ub_result)
                      -> ::std::os::raw::c_int;
    pub fn ub_resolve_async(ctx: *mut ub_ctx,
                            name: *const ::std::os::raw::c_char,
                            rrtype: ::std::os::raw::c_int,
                            rrclass: ::std::os::raw::c_int,
                            mydata: *mut ::std::os::raw::c_void,
                            callback: ub_callback_t,
                            async_id: *mut ::std::os::raw::c_int)
                            -> ::std::os::raw::c_int;
    pub fn ub_cancel(ctx: *mut ub_ctx, async_id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ub_resolve_free(result: *mut ub_result);
    pub fn ub_strerror(err: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
    pub fn ub_ctx_print_local_zones(ctx: *mut ub_ctx) -> ::std::os::raw::c_int;
    pub fn ub_ctx_zone_add(ctx: *mut ub_ctx,
                           zone_name: *const ::std::os::raw::c_char,
                           zone_type: *const ::std::os::raw::c_char)
                           -> ::std::os::raw::c_int;
    pub fn ub_ctx_zone_remove(ctx: *mut ub_ctx,
                              zone_name: *const ::std::os::raw::c_char)
                              -> ::std::os::raw::c_int;
    pub fn ub_ctx_data_add(ctx: *mut ub_ctx,
                           data: *const ::std::os::raw::c_char)
                           -> ::std::os::raw::c_int;
    pub fn ub_ctx_data_remove(ctx: *mut ub_ctx,
                              data: *const ::std::os::raw::c_char)
                              -> ::std::os::raw::c_int;
    pub fn ub_version() -> *const ::std::os::raw::c_char;
}
